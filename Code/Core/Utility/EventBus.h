// ********************************************************************
// Copyright (c) 2022 Nathan Hanlan
// 
// Permission is hereby granted, free of charge, to any person obtaining a 
// copy of this software and associated documentation files(the "Software"), 
// to deal in the Software without restriction, including without limitation 
// the rights to use, copy, modify, merge, publish, distribute, sublicense, 
// and / or sell copies of the Software, and to permit persons to whom the 
// Software is furnished to do so, subject to the following conditions :
// 
// The above copyright notice and this permission notice shall be included in 
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE 
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
// ********************************************************************

#pragma once
#include "Core/Common/Assert.h"
#include "Core/Utility/StdVector.h"
#include "Core/Utility/UniqueNumber.h"

namespace lf {

// ********************************************************************
// A class designed to provide easy register/unregister for specific events
// using a key to identify the callback. 
//    
//  The key is generated by the client code.
// ********************************************************************
template<typename TKey, typename TCallback>
class TUserKeyEventBusBase
{
    struct ScopeGuard
    {
        ScopeGuard(bool& value) : mValue(value) { mValue = true; }
        ~ScopeGuard() { mValue = false; }

        bool& mValue;
    };

    struct EventListener
    {
        TKey mKey;
        TCallback  mCallback;
    };

public:
    TUserKeyEventBusBase()
    : mListeners()
    , mScopeGuard(false)
    {}

    void Register(const TKey& key, const TCallback& callback)
    {
        Assert(!mScopeGuard);
        mListeners.push_back({ key, callback });
    }

    void Unregister(const TKey& key)
    {
        Assert(!mScopeGuard);
        for (auto it = mListeners.begin(); it != mListeners.end(); ++it)
        {
            if (it->mKey == key)
            {
                mListeners.swap_erase(it);
                return;
            }
        }
    }

    template<typename ... TArgs>
    void Invoke(TArgs ... args)
    {
        Assert(!mScopeGuard);
        ScopeGuard guard(mScopeGuard);
        for (auto& eventListener : mListeners)
        {
            if (eventListener.mCallback.IsValid())
            {
                eventListener.mCallback(std::forward<TArgs...>(args...));
            }
        }
    }

    void ClearInvalidCallbacks()
    {
        for (auto it = mListeners.begin(); it != mListeners.end(); )
        {
            if (!it->mCallback.IsValid())
            {
                it = mListeners.swap_erase(it);
            }
            else
            {
                ++it;
            }
        }
    }

    void Clear()
    {
        mListeners.clear();
    }

private:
    TVector<EventListener> mListeners;
    bool                   mScopeGuard;
};

// ********************************************************************
// A class designed to provide easy register/unregister for specific events
// using a key to identify the callback. 
//    
// The client code should keep track of the key returned from the Register function.
// ********************************************************************
template<typename TCallback>
class TGeneratedKeyEventBusBase
{
public:
    using IDType = Int32;
private:
    using IDGen = UniqueNumber<IDType, 8>;
    using EventBusType = TUserKeyEventBusBase<IDType, TCallback>;
    struct EventListener
    {
        IDType mKey;
        TCallback  mCallback;
    };
    struct ScopeGuard
    {
        ScopeGuard(bool& value) : mValue(value) { mValue = true; }
        ~ScopeGuard() { mValue = false; }

        bool& mValue;
    };
public:

    TGeneratedKeyEventBusBase()
        : mIDGen()
        , mListeners()
        , mScopeGuard(false)
    {}

    IDType Register(const TCallback& callback)
    {
        Assert(!mScopeGuard);
        IDType id = mIDGen.Allocate();
        mListeners.push_back({ id, callback });
        return id;
    }

    void Unregister(IDType key)
    {
        Assert(!mScopeGuard);
        for (auto it = mListeners.begin(); it != mListeners.end(); ++it)
        {
            if (it->mKey == key)
            {
                mListeners.swap_erase(it);
                mIDGen.Free(key);
                return;
            }
        }
    }

    template<typename ... TArgs>
    void Invoke(TArgs ... args)
    {
        Assert(!mScopeGuard);
        ScopeGuard guard(mScopeGuard);
        for (auto& eventListener : mListeners)
        {
            if (eventListener.mCallback.IsValid())
            {
                eventListener.mCallback(std::forward<TArgs...>(args...));
            }
        }
    }
    
    void ClearInvalidCallbacks()
    {
        for (auto it = mListeners.begin(); it != mListeners.end(); )
        {
            if (!it->mCallback.IsValid())
            {
                mIDGen.Free(it->mKey);
                it = mListeners.swap_erase(it);
            }
            else
            {
                ++it;
            }
        }
    }

    void Clear()
    {
        mListeners.clear();
        mIDGen = IDGen();
    }

private:
    IDGen        mIDGen;
    TVector<EventListener> mListeners;
    bool         mScopeGuard;
};

template<typename TKey, typename TCallback>
using TUserKeyEventBus = TUserKeyEventBusBase<TKey, TCallback>;

template<typename TCallback>
using TEventBus = TGeneratedKeyEventBusBase<TCallback>;

} // namespace lf
